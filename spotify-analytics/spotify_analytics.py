"""
Developed by Noah Schliesman
With help from Cameron Watts at TowardsDataScience
Connects to Spotify API to track average playlist metrics
"""
import spotipy
import tkinter as tk
from spotipy.oauth2 import SpotifyClientCredentials

class spotify_window:
    """
    Tkinter GUI window that allows for a visualization of playlist metrics. Input
    playlist URL and gain interesting metrics generated by Spotify.
    """
    def __init__(self):

        #Window Initialization
        self.window = tk.Tk()
        self.window.geometry()
        self.window.title("Spotify Analytics by Noah Schliesman")

        #Constants
        self.value_width = 20
        self.button_width = 8

        #Spotify Client API Connection
        self.cid = "" #insert client id here
        self.secret = "" #insert client secret here
        self.client_credintials_manager = SpotifyClientCredentials(client_id=self.cid, client_secret=self.secret)
        self.sp = spotipy.Spotify(client_credentials_manager=self.client_credintials_manager)

        #Initialization of empty analysis dictionary
        self.var_dict = {'danceability': 0, 'energy': 0, 'key': 0, 'loudness': 0, 'speechiness': 0, 'acousticness': 0, 
                        'instrumentalness': 0, 'liveness': 0, 'valence': 0, 'tempo': 0,  'duration_ms': 0}

        #URL entry label
        self.url_label = tk.Label(self.window, text="Playlist URL:", anchor='w')
        self.url_label.grid(row=1,column=1)
        self.url_input = tk.StringVar()
        self.url_input_entry = tk.Entry(self.window, textvariable=self.url_input, width=self.value_width)
        self.url_input_entry.grid(row=1, column=2)

        #Analyze button to gather results
        self.analyze_button = tk.Button(self.window, text="Analyze", width=self.button_width, command=self.analyze)
        self.analyze_button.grid(row=1,column=3)

        #Danceability Data
        self.danceability_label = tk.Label(self.window, text="Danceability:")
        self.danceability_label.grid(row=2, column=1)
        self.danceability = tk.StringVar()
        self.danceability_result = tk.Label(self.window, textvariable=self.danceability, relief='raised', width=self.value_width)
        self.danceability_result.grid(row=2,column=2)

        #Clear button 
        self.clear_button = tk.Button(self.window, text="Clear", width=self.button_width, command=self.clear)
        self.clear_button.grid(row=2,column=3)

        #Energy Data
        self.energy_label = tk.Label(self.window, text="Energy:")
        self.energy_label.grid(row=3, column=1)
        self.energy = tk.StringVar()
        self.energy_result = tk.Label(self.window, textvariable=self.energy, relief='raised', width=self.value_width)
        self.energy_result.grid(row=3,column=2)

        #Quit button
        self.quit_button = tk.Button(self.window, text="Quit", width=self.button_width, command=self.quit)
        self.quit_button.grid(row=3,column=3)

        #Key Data
        self.key_label = tk.Label(self.window, text="Key:")
        self.key_label.grid(row=4, column=1)
        self.key = tk.StringVar()
        self.key_result = tk.Label(self.window, textvariable=self.key, relief='raised', width=self.value_width)
        self.key_result.grid(row=4,column=2)

        #Loudness Data
        self.loudness_label = tk.Label(self.window, text="Loudness:")
        self.loudness_label.grid(row=5, column=1)
        self.loudness = tk.StringVar()
        self.loudness_result = tk.Label(self.window, textvariable=self.loudness, relief='raised', width=self.value_width)
        self.loudness_result.grid(row=5,column=2)

        #Speechiness Data
        self.speechiness_label = tk.Label(self.window, text="Speechiness:")
        self.speechiness_label.grid(row=6, column=1)
        self.speechiness = tk.StringVar()
        self.speechiness_result = tk.Label(self.window, textvariable=self.speechiness, relief='raised', width=self.value_width)
        self.speechiness_result.grid(row=6,column=2)

        #Acousticness Data
        self.acousticness_label = tk.Label(self.window, text="Acousticness:")
        self.acousticness_label.grid(row=7, column=1)
        self.acousticness = tk.StringVar()
        self.acousticness_result = tk.Label(self.window, textvariable=self.acousticness, relief='raised', width=self.value_width)
        self.acousticness_result.grid(row=7,column=2)

        #Instrumentalness Data
        self.instrumentalness_label = tk.Label(self.window, text="Instrumentalness:")
        self.instrumentalness_label.grid(row=8, column=1)
        self.instrumentalness = tk.StringVar()
        self.instrumentalness_result = tk.Label(self.window, textvariable=self.instrumentalness, relief='raised', width=self.value_width)
        self.instrumentalness_result.grid(row=8,column=2)

        #Liveness Data
        self.liveness_label = tk.Label(self.window, text="Liveness:")
        self.liveness_label.grid(row=9, column=1)
        self.liveness = tk.StringVar()
        self.liveness_result = tk.Label(self.window, textvariable=self.liveness, relief='raised', width=self.value_width)
        self.liveness_result.grid(row=9,column=2)

        #Valence Data
        self.valence_label = tk.Label(self.window, text="Valence:")
        self.valence_label.grid(row=10, column=1)
        self.valence = tk.StringVar()
        self.valence_result = tk.Label(self.window, textvariable=self.valence, relief='raised', width=self.value_width)
        self.valence_result.grid(row=10,column=2)

        #Tempo Data
        self.tempo_label = tk.Label(self.window, text="Tempo:")
        self.tempo_label.grid(row=11, column=1)
        self.tempo = tk.StringVar()
        self.tempo_result = tk.Label(self.window, textvariable=self.tempo, relief='raised', width=self.value_width)
        self.tempo_result.grid(row=11,column=2)

        #Duration_ms Features
        self.duration_ms_label = tk.Label(self.window, text="Duration:")
        self.duration_ms_label.grid(row=12, column=1)
        self.duration_ms = tk.StringVar()
        self.duration_ms_result = tk.Label(self.window, textvariable=self.duration_ms, relief='raised', width=self.value_width)
        self.duration_ms_result.grid(row=12,column=2)

        #Grid Propagation
        self.danceability_label.grid_propagate(False)
        self.energy_label.grid_propagate(False)
        self.key_label.grid_propagate(False)
        self.loudness_label.grid_propagate(False)
        self.speechiness_label.grid_propagate(False)
        self.acousticness_label.grid_propagate(False)
        self.instrumentalness_label.grid_propagate(False)
        self.liveness_label.grid_propagate(False)
        self.valence_label.grid_propagate(False)
        self.tempo_label.grid_propagate(False)
        self.duration_ms_label.grid_propagate(False)

        #Mainloop
        self.window.mainloop()
    
    def analyze(self):
        """
        Analyzes input data gathered from url_input and returns metrics gained by
        the Spotify API. Utilizes a dictionary to take a running average of all tracks
        in a playlist to generalize metrics about it. Returns data to all tkinter labels.
        """
        #URL Input Handler
        self.playlist_link = self.url_input.get()
        self.playlist_uri = self.playlist_link.split("/")[-1].split("?")[0] #Gets Playlist Token
        self.count = 0
        for track in self.sp.playlist_tracks(self.playlist_uri)["items"]: #Iterates through tracks
            self.count += 1
            self.track_uri = track["track"]["uri"]
            self.track_features = self.sp.audio_features(self.track_uri)[0]
            for item in ['danceability', 'energy', 'key', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms']:
                self.var_dict[item] += self.track_features[item] #adds relevent features to dictionary
        for item in ['danceability', 'energy', 'key', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms']:
            self.var_dict[item] = self.var_dict[item] / self.count #averages dictionary among number of tracks
      
        #Label Output Handler
        self.danceability.set(str(int(self.var_dict['danceability']*100))+"%")
        self.energy.set(str(int(self.var_dict['energy']*100))+"%")
        self.key.set(round(self.var_dict['key'],2))
        self.loudness.set(str(int(self.var_dict['loudness']))+"%")
        self.speechiness.set(str(int(self.var_dict['speechiness']*100))+"%")
        self.acousticness.set(str(int(self.var_dict['acousticness']*100))+"%")
        self.instrumentalness.set(str(int(self.var_dict['instrumentalness']*100))+"%")
        self.liveness.set(str(int(self.var_dict['liveness']*100))+"%")
        self.valence.set(str(int(self.var_dict['valence']*100))+"%")
        self.tempo.set(str(int(self.var_dict['tempo']))+" BPM")
        self.duration_ms.set(str(round((self.var_dict['duration_ms'] / 1000) / 60, 2)) + " min")
      
    def clear(self):
        """
        Clears data from URL input and the data labels.
        """
        self.url_input.set("")
        self.danceability.set("")
        self.energy.set("")
        self.key.set("")
        self.loudness.set("")
        self.speechiness.set("")
        self.acousticness.set("")
        self.instrumentalness.set("")
        self.liveness.set("")
        self.valence.set("")
        self.tempo.set("")
        self.duration_ms.set("")

    def quit(self):
        """
        Exits the window.
        """
        self.window.destroy()
if __name__ == "__main__":
    spotify_window()